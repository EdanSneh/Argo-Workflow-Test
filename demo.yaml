apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: my-argo-workflow-
spec:
  entrypoint: main-dag
  templates:
  - name: main-dag
    inputs:
      parameters:
      - name: IMAGE
        default: "https://upload.wikimedia.org/wikipedia/commons/1/15/Latin_D.png"
    dag:
      tasks:
      - name: DOWNLOAD
        template: download-image
        arguments:
          parameters:
          - name: IMAGE-URL
            value: "{{inputs.parameters.IMAGE}}"
      - name: IMAGE-SPLIT
        dependencies: [DOWNLOAD]
        template: image-split
        arguments:
          artifacts:
          - name: UNSPLITIMAGE
            from: "{{tasks.DOWNLOAD.outputs.artifacts.IMAGE}}"
      - name: JSON-COMPACT
        dependencies: [IMAGE-SPLIT]
        template: json-compact
        arguments:
          parameters:
          - name: numofimages
            value: "{{tasks.IMAGE-SPLIT.outputs.parameters.TOTALNUM}}"
      - name: LOOPED-RETRIEVAL
        dependencies: [JSON-COMPACT]
        template: looped-retrieval
        arguments:
          parameters:
          - name: randval
            value: "{{tasks.JSON-COMPACT.outputs.result}}"
      - name: LOOPED-3D
        dependencies: [LOOPED-RETRIEVAL]
        template: looped3D
      - name: OUTPUT
        dependencies: [LOOPED-RETRIEVAL]
        template: output

  - name: download-image
    inputs:
      parameters:
      - name: IMAGE-URL
    container:
      image: sequenceiq/alpine-curl
      command: ["sh", "-c"]
      args: ["curl {{inputs.parameters.IMAGE-URL}} > /tmp/image.png"]
    outputs:
      artifacts:
      - name: IMAGE
        path: /tmp/image.png
  - name: image-split
    inputs:
      artifacts:
      - name: UNSPLITIMAGE
        path: /image.jpg
    container:
      image: alpine
      command: ["sh", "-c"]
      args: ["echo -n doing some image split > /tmp/hello.txt"]
    outputs:
      parameters:
      - name: TOTALNUM
        valueFrom:
          path: /tmp/hello.txt
  - name: json-compact
    inputs:
      parameters:
      - name: numofimages
    script:
      image: python:alpine3.6
      command: [python]
      source: |
            import json
            import sys
            json.dump([3,4,5,4,3,3,7,8,9], sys.stdout)
  - name: looped-retrieval
    inputs:
      parameters:
      - name: randval
    steps:
    - - name: PARAMPASSING
        template: parampassing
        arguments:
          parameters:
          - name: iterator
            value: "{{item}}"
        withParam: "{{inputs.parameters.randval}}"
    #OMIT - - name: SIDEIMAGE
    #     template: sideimage
    #     when: "{{steps.PARAMPASSING.outputs.parameters.passediterator}} == 3"

  - name: looped3D
    container:
      image: alpine
      command: ["sh", "-c"]
      args: ["echo looped3D"]
  - name: output
    container:
      image: alpine
      command: ["sh", "-c"]
      args: ["echo output"]

  - name: parampassing
    inputs:
      parameters:
      - name: iterator
    steps:
    - - name: RECEIVER
        template: receiver
        arguments:
          parameters:
          - name: iterator
            value: "{{inputs.parameters.iterator}}"
    - - name: SIDEIMAGE
        template: sideimage
        arguments:
          parameters:
          - name: face
            value: "{{steps.RECEIVER.outputs.parameters.passediterator}}"
        when: "{{steps.RECEIVER.outputs.parameters.passediterator}} == 3"
  - name: receiver
    inputs: 
      parameters:
      - name: iterator
    container:
      image: alpine:latest
      command: ["sh", "-c"]
      args: ["echo -n {{inputs.parameters.iterator}} > /tmp/hello.txt"]
    outputs:
      parameters:
      - name: passediterator
        valueFrom:
          path: /tmp/hello.txt 
  - name: sideimage
    inputs:
      parameters:
      - name: face
    container:
      image: alpine
      command: ["sh", "-c"]
      args: ["echo sideimage"]





  

    
