apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: eli-edan-argo-workflow-
spec:
  entrypoint: face-project
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: face-processing-demo-pvc
  templates:
  - name: face-project
    inputs:
      parameters:
      - name: IMAGE-URL
        default: "https://i.imgur.com/QUS0pCI.jpg"
      artifacts:
      - name: CODE
        git: 
          repo: https://github.com/EliZucker/Argo-Workflow-Test.git
    steps:
    - - name: DOWNLOAD-IMAGE
        template: download-image
        arguments:
          parameters:
          - name: IMAGE-URL
            value: "{{inputs.parameters.IMAGE-URL}}"
      - name: APPLY-PVC
        template: apply-pvc
        
    - - name: LOCATE-FACES
        template: locate-faces
        arguments:
          artifacts:
          - name: RAW-IMAGE
            from: "{{steps.DOWNLOAD-IMAGE.outputs.artifacts.IMAGE}}"
          - name: "CODE"
            from: "{{inputs.artifacts.CODE}}"

      - name: MINIO
        template: minio
        
    - - name: HANDLE-INDIVIDUAL-FACES
        template: handle-individual-faces
        arguments:
          artifacts:
          - name: RAW-IMAGE
            from: "{{steps.DOWNLOAD-IMAGE.outputs.artifacts.IMAGE}}"
          - name: CODE
            from: "{{inputs.artifacts.CODE}}"
          parameters:
          - name: imagemagick-command
            value: "{{item}}"
        withParam: "{{steps.LOCATE-FACES.outputs.parameters.imagemagick-commands}}"

    - - name: TFJOB
        template: tfjob
        
  - name: download-image
    inputs:
      parameters:
      - name: IMAGE-URL
    container:
      image: sequenceiq/alpine-curl
      command: ["sh", "-c"]
      args: ["curl {{inputs.parameters.IMAGE-URL}} > /rawimage.jpg"]
    outputs:
      artifacts:
      - name: IMAGE
        path: /rawimage.jpg
  
  - name: apply-pvc
    resource:
      action: apply
      manifest: |
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: face-processing-demo-pvc
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 1Gi
          
  - name: locate-faces
    inputs:
      artifacts:
      - name: RAW-IMAGE
        path: /src/rawimage.jpg
      - name: CODE
        path: /src
    container:
      image: victorhcm/opencv
      command: ["bash", "-c"]
      args: [python /src/faceeyedetect.py]
    outputs:
      parameters:
      - name: imagemagick-commands
        valueFrom:
          path: /src/imagemagick_commands.json

  - name: handle-individual-faces
    inputs:
      parameters:
      - name: imagemagick-command
      artifacts:
      - name: RAW-IMAGE
      - name: CODE
    steps:
    - - name: CROP-FACE
        template: crop-face
        arguments:
          artifacts:
          - name: RAW-IMAGE
            from: "{{inputs.artifacts.RAW-IMAGE}}"
          parameters:
          - name: imagemagick-command
            value: "{{inputs.parameters.imagemagick-command}}"
    - - name: CHECK-FACE-MATCH
        template: check-face-match
        arguments:
          artifacts:
            - name: CROPPED-FACE
              from: "{{steps.CROP-FACE.outputs.artifacts.CROPPED-FACE}}"
            - name: CODE
              from: "{{inputs.artifacts.CODE}}"
    - - name: VOLUMIZE-RESULT
        template: volumize-result
        arguments:
          artifacts:
            - name: CROPPED-FACE
              from: "{{steps.CROP-FACE.outputs.artifacts.CROPPED-FACE}}"
            - name: CODE
              from: "{{inputs.artifacts.CODE}}"
              

    # Placeholder step that only runs if the cropped face doesn't match with a supplied image
    # - - name: PLACEHOLDER-STEP
    #     template: placeholder-step
    #     when: "{{steps.CHECK-FACE-MATCH.outputs.result}} == unrecognized-face"
    


  - name: crop-face
    inputs:
      artifacts:
      - name: RAW-IMAGE
        path: /data/rawimage.jpg
      parameters:
      - name: imagemagick-command
    container:
      image: acleancoder/imagemagick-full
      command: ["bash", "-c"]
      args: ["{{inputs.parameters.imagemagick-command}}"]
    outputs:
      artifacts:
      - name: CROPPED-FACE
        path: /tmp/cropped_face.jpg
   
  - name: check-face-match
    inputs:
      artifacts:
      - name: CROPPED-FACE
        path: /tmp/photo.jpg
      - name: CODE
        path: /src
    script:
      image: gcr.io/argo-edan/facerec
      command: [python,  /src/facereference.py]

  # - name: placeholder-step
  #   container:
  #     image: gcr.io/argo-edan/facerec
  #     command: [python,  /src/facereference.py]

  - name: volumize-result
    inputs:
      artifacts:
      - name: CROPPED-FACE
        path: /tmp/photo.jpg
      - name: CODE
        path: /src
    container:
      image: debian:stable-slim
      command: [sh, -c]
      args: ["cp --backup=numbered /tmp/photo.jpg /mnt/vol/face.jpg"]
      volumeMounts: 
      - name: workdir
        mountPath: /mnt/vol

  - name: tfjob
    resource:
      action: create
      successCondition: status.tfReplicaStatuses.PS.succeeded > 0, status.tfReplicaStatuses.Worker.succeeded > 0
      failureCondition: status.tfReplicaStatuses.PS.failed > 0
      manifest: |
        apiVersion: kubeflow.org/v1alpha2
        kind: TFJob
        metadata:
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            blockOwnerDeletion: true
            kind: Workflow
            name: "{{workflow.name}}"
            uid: "{{workflow.uid}}"
          labels:
            ksonnet.io/component: dockerpnet
          name: dockerpnet
          namespace: default
        spec:
          tfReplicaSpecs:
            Ps:
              template:
                spec:
                  volumes:
                  - name: workdir
                    persistentVolumeClaim:
                      claimName: face-processing-demo-pvc
                  containers:
                  - args:
                    - "curl https://raw.githubusercontent.com/EliZucker/Argo-Workflow-Test/master/deploy.sh
                      | bash"
                    command:
                    - /bin/sh
                    - -c
                    image: gcr.io/argo-edan/tensfordlib
                    name: tensorflow
                    volumeMounts: 
                    - name: workdir
                      mountPath: /mnt/vol
                    resources:
                      limits:
                        nvidia.com/gpu: "1"
                  restartPolicy: OnFailure
              tfReplicaType: PS
            Worker:
              replicas: 1
              template:
                spec:
                  volumes:
                  - name: workdir
                    persistentVolumeClaim:
                      claimName: face-processing-demo-pvc
                  containers:
                  - args:
                    - "curl https://raw.githubusercontent.com/EliZucker/Argo-Workflow-Test/master/deploy.sh
                      | bash"
                    command:
                    - /bin/sh
                    - -c
                    image: gcr.io/argo-edan/tensfordlib
                    name: tensorflow
                    volumeMounts: 
                    - name: workdir
                      mountPath: /mnt/vol
                    resources:
                      limits:
                        nvidia.com/gpu: "1"
                  restartPolicy: OnFailure
 #retrieve TFJOB output from minio bucket                 
  - name: minio
    container:
      image: minio/mc
      command: [sh, -c]
      args: ["
        export AWS_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE &&
        export AWS_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY &&
        mc config host add bucketport http://argo-artifacts-minio.default:9000 $AWS_ACCESS_KEY $AWS_SECRET_KEY &&
        mc cp -r bucketport/3dfacebucket/vol /tmp &&
        mc rm bucketport/3dfacebucket/vol
      "]
    outputs:
      artifacts:
      - name: resultfaces
        path: /tmp

                  